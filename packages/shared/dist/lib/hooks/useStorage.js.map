{
  "version": 3,
  "sources": ["../../../lib/hooks/useStorage.tsx"],
  "sourcesContent": ["import { useSyncExternalStore } from 'react';\nimport type { BaseStorage } from '@extension/storage';\n\ntype WrappedPromise = ReturnType<typeof wrapPromise>;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst storageMap: Map<BaseStorage<any>, WrappedPromise> = new Map();\n\nexport function useStorage<\n  Storage extends BaseStorage<Data>,\n  Data = Storage extends BaseStorage<infer Data> ? Data : unknown,\n>(storage: Storage) {\n  const _data = useSyncExternalStore<Data | null>(storage.subscribe, storage.getSnapshot);\n\n  if (!storageMap.has(storage)) {\n    storageMap.set(storage, wrapPromise(storage.get()));\n  }\n  if (_data !== null) {\n    storageMap.set(storage, { read: () => _data });\n  }\n\n  return (_data ?? storageMap.get(storage)!.read()) as Exclude<Data, PromiseLike<unknown>>;\n}\n\nfunction wrapPromise<R>(promise: Promise<R>) {\n  let status = 'pending';\n  let result: R;\n  const suspender = promise.then(\n    r => {\n      status = 'success';\n      result = r;\n    },\n    e => {\n      status = 'error';\n      result = e;\n    },\n  );\n\n  return {\n    read() {\n      switch (status) {\n        case 'pending':\n          throw suspender;\n        case 'error':\n          throw result;\n        default:\n          return result;\n      }\n    },\n  };\n}\n"],
  "mappings": ";AAAA,SAAS,4BAA4B;AAKrC,MAAM,aAAoD,oBAAI,IAAI;AAE3D,gBAAS,WAGd,SAAkB;AAClB,QAAM,QAAQ,qBAAkC,QAAQ,WAAW,QAAQ,WAAW;AAEtF,MAAI,CAAC,WAAW,IAAI,OAAO,GAAG;AAC5B,eAAW,IAAI,SAAS,YAAY,QAAQ,IAAI,CAAC,CAAC;AAAA,EACpD;AACA,MAAI,UAAU,MAAM;AAClB,eAAW,IAAI,SAAS,EAAE,MAAM,MAAM,MAAM,CAAC;AAAA,EAC/C;AAEA,SAAQ,wBAAS,WAAW,IAAI,OAAO,EAAG,KAAK;AACjD;AAEA,SAAS,YAAe,SAAqB;AAC3C,MAAI,SAAS;AACb,MAAI;AACJ,QAAM,YAAY,QAAQ;AAAA,IACxB,OAAK;AACH,eAAS;AACT,eAAS;AAAA,IACX;AAAA,IACA,OAAK;AACH,eAAS;AACT,eAAS;AAAA,IACX;AAAA,EACF;AAEA,SAAO;AAAA,IACL,OAAO;AACL,cAAQ,QAAQ;AAAA,QACd,KAAK;AACH,gBAAM;AAAA,QACR,KAAK;AACH,gBAAM;AAAA,QACR;AACE,iBAAO;AAAA,MACX;AAAA,IACF;AAAA,EACF;AACF;",
  "names": []
}
